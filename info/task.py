
# Тестовое задание:

+ # # -Создать виртуальное окружение для вашего проекта.
+ # # -Установку сторонних модулей (Flask, Django и т.д.) производить в созданное виртуальное
+ #    окружение с помощью менеджера пакетов pip.
+ # # -База данных (на выбор): MySQL, H2, HSQLDB, любая другая на ваш выбор (для юнит-тестов
+ #    использовать «In-memory database mode»).
+ # # -Установить подключение к БД.
+ # # -В БД необходимо создать две таблицы: Отделы и Сотрудники.
+ # # -БД должна заполняться тестовыми данными.
+ # # -Для отделов хранить название отдела.
+ # # -Для сотрудников хранить: отдел, ФИО сотрудника, дату его рождения и его зарплату.
#



++ - # -Написать Web-сервис (RESTful) для доступа к данным, который будет выбирать данные из
++ - #  БД и сохранять/изменять/удалять данные в БД.
++ - # !!! на этом этапе все должно работать через curl!!!


# -Написать простое Web-приложение для работы с отделами и сотрудниками отделов. Данное
#  приложение для работы с БД должно использовать Web-сервис указанный выше (п.9).
# -Web - приложение должно позволять:
#   # -посмотреть список отделов и среднюю зарплату (рассчитывается автоматически) по этим
#      отделам (первая списочная форма);
#   # -список сотрудников в отделах с указанием зарплаты для каждого сотрудника  и полем поиска
#      для поиска сотрудников родившихся в определенную дату или в период между датами (вторая списочная форма);
#   # -изменять (добавлять/редактировать/удалять) вышеуказанные данные.
#   # -Проект ОБЯЗАТЕЛЬНО собирать c помощью setuptools, distutils или distribute.
#   # -Проект ОБЯЗАТЕЛЬНО должен собираться из командной строки.
#
# -Результат сборки приложения - 1 или 2 (веб-сервис (п.9) и веб-приложение (п.10)) .tar.gz
#  файлов (в зависимости от выбранных технологий и подходов к реализации):
#
+ - !!!!!  # -Проект должен быть размещен в публичной системе контроля версий GitHub. Ссылку на проект
#  предоставить письмом. Readme проекта должно содержать краткое описание проекта (на Английском),
#  инструкцию о том как из командной строки проект можно собрать, как его запустить и по каким адресам
#  будут доступны модуль сервисов (RESTful) и Web-приложение после запуска.
#  Замечание по хранению кода в репозитории: не надо сохранять там папки / архивы сборки проекта,
#  библиотеки, скомпилированные классы и служебные файлы используемой среды разработки.
#
+ - !!!!! # -При реализации проекта обратите внимание на то, что отладочная информация должна выводиться
#  с уровнем DEBUG в консоль и в отдельный файл.
#
+ - !!!!! # -Особое внимание следует уделить созданию юнит-тестов (например модуль unittest): Проект
#  без юнит-тестов не считается рабочим даже если визуально он работает.
#
ok # - ОК!Код не должен содержать "запасных" методов на будущее. Делаем только то, что требуется
#  для поставленной задачи.
#
ok # - ОК! Классы (если имеются) и сложные методы должны иметь комментарии в формате docstrings
#  (и конечно же - на Английском :).
#
#
# В результате данного проекта мы получим систему, которая будет
# состоять из двух частей: Web-сервис и Web-клиентское приложение,
# которое использует этот Web-сервис  для отображения и изменения состояний БД.
#